name: Gateway CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'Gateway/**'
      - '.github/workflows/gateway.yml'

jobs:
  test:
    name: Build and test ASP.NET Core project
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore Gateway
    - name: Build
      run: dotnet build --no-restore Gateway
    - name: Test
      run: dotnet test --no-build --verbosity normal Gateway

  sonarcloud:
    needs: [ test ]
    name: Code linting with SonarCloud
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_GATEWAY }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"frankensound_gateway" /o:"frankensound" /d:sonar.token="${{ secrets.SONAR_TOKEN_GATEWAY }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build Gateway
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN_GATEWAY }}"
  publish:
    name: Publish Dockerfile to Dockerhub
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore Gateway
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./Gateway
          file: ./Gateway/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/gateway:latest

  deploy:
      name: Deployment
      needs: [ test, publish ]
      runs-on: ubuntu-latest
      steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set AZURE_CORE_OUTPUT to None
        run: echo "AZURE_CORE_OUTPUT=none" >> $GITHUB_ENV
      - name: Set AKS Context
        run: az aks get-credentials --name dev-frankencluster --resource-group frankengroup
      - name: Deploy to AKS
        run: kubectl apply -f ./Gateway/Deployments
      - name: Restart Deployment
        run: kubectl rollout restart deployment/gateway    

  snyk-code:
      name: Static code security analysis with Synk
      needs: [ test ]
      runs-on: ubuntu-latest
      permissions:
        security-events: write
      steps:
        - uses: actions/checkout@v3
        - name: Restore dependencies
          run: dotnet restore Gateway
        - name: Run Snyk to check for vulnerabilities
          uses: snyk/actions/dotnet@master
          continue-on-error: true
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          with:
            args: --sarif-file-output=snyk.sarif 
                  --severity-threshold=high
                  --all-projects
        - name: Upload result to GitHub Code Scanning
          uses: github/codeql-action/upload-sarif@v2
          with:
            sarif_file: snyk.sarif

  snyk-docker:
    name: Static Docker image security analysis with Synk
    needs: [ publish ]
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run Snyk to check Docker image for vulnerabilities
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ secrets.DOCKER_USERNAME }}/gateway:latest
          args: --file=./Gateway/Dockerfile
                --severity-threshold=high
                --run-quality-checks=true
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
